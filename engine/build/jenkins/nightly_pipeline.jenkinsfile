// ISAAC SDK Nightly Pipeline
//
// Nightly automated builds for ISAAC
// Runs every night and archives the resulting artifacts on the
// binary storage
//
// Copyright (c) 2019, NVIDIA CORPORATION. All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto. Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

pipeline {
    agent {
        node {
            label 'isaac && gpu'
        }
    }
    triggers {
        cron('@midnight')
    }
    parameters {
        string(
            name: 'REF',
            description: "Branch to build. Use a branch name or full REF",
            defaultValue: 'master'
        )
    }
    environment {
        GERRIT_SERVER="git-master.nvidia.com"
        CREDENTIALS_ID="isaac-git-master"
        ARCHIVE_SERVER="isaac-sdk-build-01.nvidia.com"
        ARCHIVE_PATH="~/internal-archive"
        ARTIFACTORY_CREDENTIALS_ID="isaac-artifactory-key"
        ARTIFACTORY_ENDPOINT="https://sc-hw-artf.nvidia.com/isaac-sdk-builds-local/nightly"
        BAZEL_CACHE="http://isaac-sdk-build-01.nvidia.com:8080"
        NGC_REGISTRY_CREDENTIALS = 'ngc-login'
        DOCKER_ARGUMENTS='-e HOME=/tmp -v /etc/passwd:/etc/passwd:ro'
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 3, unit: 'HOURS')
    }
    stages {
        stage('Build Package') {
            steps {
                script {
                    docker.withRegistry('https://nvcr.io', NGC_REGISTRY_CREDENTIALS) {
                        def isaac_ci_container = docker.build('isaac-ci', '-f engine/build/jenkins/isaac_ci.dockerfile engine/build')
                        isaac_ci_container.inside("${DOCKER_ARGUMENTS}") {
                            dir(HOME) {
                                dir(WORKSPACE) {
                                    sh "bazel build --remote_http_cache=${BAZEL_CACHE} ..."
                                    sh 'packages/create_binary_package/create_release.sh'
                                    sh 'rsync --progress --remove-source-files /tmp/isaac_release.tar.xz .'
                                }
                            }
                        }
                    }
                    try {
                        stash name:"nightly-package", includes: "isaac_release.tar.xz"
                    } catch (e) {
                        println(e.getMessage())
                    }
                }
            }
        }
        stage("Test release package") {
            options {
                skipDefaultCheckout(true)
            }
            steps {
                script {
                    docker.withRegistry('https://nvcr.io', NGC_REGISTRY_CREDENTIALS) {
                        def isaac_build_container = docker.image('nvcr.io/nvidian/isaac-sdk/isaac-sdk')
                        isaac_build_container.inside("${DOCKER_ARGUMENTS} --runtime=nvidia") {
                            dir(HOME) {
                                dir(WORKSPACE) {
                                    unstash "nightly-package"
                                    try {
                                        sh 'tar xf isaac_release.tar.xz'
                                        sh 'bazel clean'
                                        sh "bazel build ..."
                                        sh 'bazel test --test_output=errors --jobs=1 ...'
                                        env.PACKAGE_STATE = "Package builds cleanly"
                                    } catch (Exception e) {
                                        env.PACKAGE_STATE = "Package builds with errors"
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        stage("Final package deployment") {
            options {
                skipDefaultCheckout(true)
            }
            steps {
                unstash "nightly-package"
                dir(WORKSPACE) {
                    withCredentials([
                            sshUserPrivateKey(
                                credentialsId: env.CREDENTIALS_ID,
                                keyFileVariable: 'SSH_CREDENTIALS_FILE',
                                usernameVariable: 'SSH_CREDENTIALS_USER'
                            )
                    ]) {
                        script {
                            env.ARCHIVE_FILENAME = sh (returnStdout: true,
                                script: "echo isaac-nightly-`date +%Y%m%d`.tar.xz"
                            ).trim()
                        }
                        sh """
                            mv isaac_release.tar.xz ${env.ARCHIVE_FILENAME}
                            echo "Archiving ${WORKSPACE}/${env.ARCHIVE_FILENAME} to ${env.ARCHIVE_SERVER}:${env.ARCHIVE_PATH}"
                            scp -F /dev/null -o StrictHostKeyChecking=no -i ${SSH_CREDENTIALS_FILE} \
                                ${WORKSPACE}/${env.ARCHIVE_FILENAME} \
                                ${SSH_CREDENTIALS_USER}@${env.ARCHIVE_SERVER}:${env.ARCHIVE_PATH}
                        """
                    }

                    println "Deploying to artifactory"
                    withCredentials([
                        string(
                            credentialsId: env.ARTIFACTORY_CREDENTIALS_ID,
                            variable: "ISAAC_ARTIFACTORY_KEY"
                        )
                    ]) {
                        script {
                            env.ARTIFACTORY_DOWNLOAD = sh (returnStdout:true,
                                script: """
                                    curl -H 'X-JFrog-Art-Api:${ISAAC_ARTIFACTORY_KEY}' \
                                    -T \"${WORKSPACE}/${env.ARCHIVE_FILENAME}\" \
                                    \"${env.ARTIFACTORY_ENDPOINT}/${env.ARCHIVE_FILENAME}\" \
                                    | grep downloadUri | grep -o -E 'https://*.[^"]*'
                                """
                            ).trim()
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            emailext (
                subject: "[CI-CD][ISAAC]: Failed nightly build '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                mimeType: 'text/html',
                body: """
                <html>
                    <body>
                        <p>Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>
                    </body>
                </html>
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to: 'isacc-sdk-ci@exchange.nvidia.com',
                attachLog: true
            )
        }
        success {
            emailext (
                subject: "[CI-CD][ISAAC]: Nightly build available '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                mimeType: 'text/html',
                body: """
                <html>
                    <body>
                        <p>Successfully built '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        <p>${env.PACKAGE_STATE}</p>
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>
                        <p>
                            You can <a href="${env.ARTIFACTORY_DOWNLOAD}">download the package from Artifactory</a> here
                            <pre>${env.ARTIFACTORY_DOWNLOAD}</pre>
                        </p>
                    </body>
                </html>
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to: 'isaac-sdk-ci-notifications@exchange.nvidia.com',
                attachLog: true
            )
        }
        always {
            cleanWs()
        }
    }
}
